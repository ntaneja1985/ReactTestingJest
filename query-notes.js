[{"content":"\r\n\r\nfunction ColorList(){\r\n  return (\r\n    <ul> \r\n    <li>Red</li>\r\n    <li>Blue</li>\r\n    <li>Green</li>\r\n    </ul>\r\n  );\r\n}\r\n\r\nrender(<ColorList/>);","type":"code","id":"3kuso"},{"content":"test('getBy, queryBy, findBy finding 0 elements',async ()=>{\r\n\r\n  render(<ColorList/>)\r\n  //getByRole, getByText\r\n  //screen.getByRole('textbox') //shows error\r\n\r\n\r\n  //queryByRole, queryByText\r\n  screen.queryByRole('textbox') //returns null\r\n\r\n  //findByRole\r\n  //Works asynchronously\r\n  //Watch the output of the component over a span of one second by default and many times within that second by default(every 50 milliseconds)\r\n  //Will try to find that element else will throw an error\r\n  //Technically it returns a promise that gets rejected\r\n  \r\n  let errorThrown = false;\r\n  try {\r\n  await screen.findByRole('textbox') //shows error after 1 second\r\n  }\r\n  catch(err){\r\n    errorThrown = true;\r\n  }\r\n\r\n  expect(errorThrown).toEqual(true)\r\n  \r\n\r\n\r\n  //This is a matcher\r\n  expect(\r\n    ()=> screen.getByRole('textbox')\r\n    ).toThrow();\r\n\r\n     expect(\r\n    screen.queryByRole('textbox')\r\n    ).toEqual(null);\r\n\r\n    \r\n\r\n})","type":"code","id":"951dq"},{"content":"test('getBy, queryBy, findBy when they find 1 element',async ()=>{\r\nrender(<ColorList/>)\r\n\r\nexpect(screen.getByRole('list')).toBeInTheDocument();\r\n\r\nexpect(screen.queryByRole('list')).toBeInTheDocument();\r\n\r\nexpect(await screen.findByRole('list')).toBeInTheDocument();\r\n\r\n})","type":"code","id":"1ezbf"},{"content":"test('getBy, queryBy, findBy when they find greater than 1 element',async ()=>{\r\nrender(<ColorList/>)\r\n\r\n expect(()=>\r\nscreen.getByRole('listitem') \r\n ).toThrow();\r\n   \r\n expect(\r\n()=> screen.queryByRole('listitem') \r\n ).toThrow();\r\n  \r\n  \r\n  let errorThrown = false;\r\n  try {\r\n  await screen.findByRole('listitem') //shows error after 1 second\r\n  }\r\n  catch(err){\r\n    errorThrown = true;\r\n  }\r\n\r\n  expect(errorThrown).toEqual(true)\r\n})","type":"code","id":"vyh9w"},{"content":"test('getAllBy, queryAllBy, findAllBy', async ()=>{\r\n\r\nrender(<ColorList/>)\r\n\r\nexpect(screen.getAllByRole('listitem')\r\n).toHaveLength(3)\r\n\r\nexpect(screen.queryAllByRole('listitem')\r\n).toHaveLength(3)\r\n\r\nexpect(await screen.findAllByRole('listitem')\r\n).toHaveLength(3)\r\n\r\n})","type":"code","id":"avgew"},{"content":"test('favor using getBy to prove an element exists',()=>{\r\n  render(<ColorList/>)\r\n\r\n  const element = screen.getByRole('list');\r\n\r\n  expect(element).toBeInTheDocument()\r\n})","type":"code","id":"j235e"},{"content":"test('favor using queryBy to prove an element doesnot exist',()=>{\r\n  render(<ColorList/>)\r\n\r\n  const element = screen.queryByRole('textbox');\r\n\r\n  expect(element).not.toBeInTheDocument()\r\n})","type":"code","id":"sgmah"},{"content":"//import {useState,useEffect} from 'react'\r\n\r\nfunction fakeFetchColors(){\r\n  return Promise.resolve(\r\n    ['red','green','blue']\r\n  );\r\n}\r\n\r\nfunction LoadableColorList(){\r\n  const [colors,setColors] = useState([]);\r\n\r\nuseEffect(()=>{\r\nfakeFetchColors()\r\n.then(c => setColors(c))\r\n},[])\r\n\r\nconst renderedColors = colors.map(color => {\r\n\r\n  return <li key = {color}>{color}</li>\r\n})\r\n\r\nreturn <ul>{renderedColors}</ul>\r\n\r\n}\r\n\r\nrender(<LoadableColorList/>)","type":"code","id":"ow643"},{"content":"test('Favor findBy or findAllBy when data fetching',async ()=>{\r\n\r\n  render(<LoadableColorList/>)\r\n  const els = await screen.findAllByRole('listitem');\r\n\r\n  expect(els).toHaveLength(3)\r\n})","type":"code","id":"pp7a3"}]